<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:RTCppProperties="http://www.eclipse.org/papyrus/umlrt/cppproperties" xmlns:UMLRTStateMachines="http://www.eclipse.org/papyrus/umlrt/statemachine" xmlns:UMLRealTime="http://www.eclipse.org/papyrus/umlrt" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML">
  <uml:Model xmi:id="_sXO60DuNEemh7Jv-t4KSvQ" name="project_client">
    <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_sXO60TuNEemh7Jv-t4KSvQ" source="http://www.eclipse.org/papyrus-rt/language/1.0.0">
      <details xmi:type="ecore:EStringToStringMapEntry" xmi:id="_sXO60juNEemh7Jv-t4KSvQ" key="language" value="umlrt-cpp"/>
    </eAnnotations>
    <packagedElement xmi:type="uml:Class" xmi:id="_v3EewDuNEemh7Jv-t4KSvQ" name="Top" classifierBehavior="_DOfmcDuOEemh7Jv-t4KSvQ" isActive="true">
      <ownedAttribute xmi:type="uml:Property" xmi:id="_0T2zIDuNEemh7Jv-t4KSvQ" name="player2" visibility="protected" type="_xmnJwDuNEemh7Jv-t4KSvQ" isOrdered="true" aggregation="composite"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_6kAikDuNEemh7Jv-t4KSvQ" name="startGame" visibility="protected" type="_3ZxbMDuNEemh7Jv-t4KSvQ" isOrdered="true" aggregation="composite" isBehavior="true" isService="false"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_Bg9GkDuOEemh7Jv-t4KSvQ" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="__-_78D-8EemACYDE-qKd5g" name="board" visibility="protected" type="_-w7mUD-8EemACYDE-qKd5g" isOrdered="true" aggregation="composite"/>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_A17zoDuOEemh7Jv-t4KSvQ" name="RTConnector1">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_A2ChUDuOEemh7Jv-t4KSvQ" role="_6kAikDuNEemh7Jv-t4KSvQ"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_A2ChUTuOEemh7Jv-t4KSvQ" partWithPort="_0T2zIDuNEemh7Jv-t4KSvQ" role="_8mf-wDuNEemh7Jv-t4KSvQ"/>
      </ownedConnector>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_k8Y0wD-9EemACYDE-qKd5g" name="RTConnector2">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_k8neQD-9EemACYDE-qKd5g" partWithPort="__-_78D-8EemACYDE-qKd5g" role="_N_kTsD-9EemACYDE-qKd5g"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_k8oFUD-9EemACYDE-qKd5g" partWithPort="_0T2zIDuNEemh7Jv-t4KSvQ" role="_LTNbID-9EemACYDE-qKd5g"/>
      </ownedConnector>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_mIq44EBFEemqJPrZwKkwWQ" name="RTConnector3">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_mIq44UBFEemqJPrZwKkwWQ" partWithPort="__-_78D-8EemACYDE-qKd5g" role="_dMdL0EBFEemqJPrZwKkwWQ"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_mIq44kBFEemqJPrZwKkwWQ" partWithPort="_0T2zIDuNEemh7Jv-t4KSvQ" role="_bNFVEEBFEemqJPrZwKkwWQ"/>
      </ownedConnector>
      <ownedConnector xmi:type="uml:Connector" xmi:id="_bOIYEE2lEemGCdFy2wiJyg" name="RTConnector4">
        <end xmi:type="uml:ConnectorEnd" xmi:id="_bONQkE2lEemGCdFy2wiJyg" partWithPort="__-_78D-8EemACYDE-qKd5g" role="_NxOuEE2lEemGCdFy2wiJyg"/>
        <end xmi:type="uml:ConnectorEnd" xmi:id="_bON3oE2lEemGCdFy2wiJyg" partWithPort="_0T2zIDuNEemh7Jv-t4KSvQ" role="_KxGk8E2lEemGCdFy2wiJyg"/>
      </ownedConnector>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_DOfmcDuOEemh7Jv-t4KSvQ" name="Top_sm" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_DOx6UDuOEemh7Jv-t4KSvQ" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_DPE1QDuOEemh7Jv-t4KSvQ" name="Initial" source="_DO2LwDuOEemh7Jv-t4KSvQ" target="_DO_8wDuOEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_V3VJ0DuOEemh7Jv-t4KSvQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Top] Starting up!&quot;);&#xD;
startGame.start().send();</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_DO2LwDuOEemh7Jv-t4KSvQ" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_DO_8wDuOEemh7Jv-t4KSvQ" name="State1"/>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_xmnJwDuNEemh7Jv-t4KSvQ" name="Player2" classifierBehavior="_F5Kc8DuOEemh7Jv-t4KSvQ" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_8mf-wDuNEemh7Jv-t4KSvQ" name="startGame" visibility="public" type="_3ZxbMDuNEemh7Jv-t4KSvQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_P5CmcDuOEemh7Jv-t4KSvQ" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_xpUqEDuOEemh7Jv-t4KSvQ" name="mqtt" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_ImxXMcnWEeiTgcmKwS4Zdw"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_LTNbID-9EemACYDE-qKd5g" name="move_valid" visibility="public" type="_GkELcD-9EemACYDE-qKd5g" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_bNFVEEBFEemqJPrZwKkwWQ" name="board_update" visibility="public" type="_YQBuEEBFEemqJPrZwKkwWQ" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_PNPJUEtFEemM1b60lyH_SQ" name="timer" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_MxQZgGXsEeS_4daqvwyFrg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_bATM4E2kEemGCdFy2wiJyg" name="GameOver" visibility="package">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_gQetEE2kEemGCdFy2wiJyg"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_KxGk8E2lEemGCdFy2wiJyg" name="playerWins" visibility="public" type="_IHT4ME2lEemGCdFy2wiJyg" isOrdered="true" aggregation="composite" isBehavior="true" isConjugated="true" isService="true">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_MUfDQE2lEemGCdFy2wiJyg" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_MVB10E2lEemGCdFy2wiJyg" value="1"/>
      </ownedAttribute>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_F5Kc8DuOEemh7Jv-t4KSvQ" name="Player2_sm" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_F5WqMDuOEemh7Jv-t4KSvQ" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_F5ksoDuOEemh7Jv-t4KSvQ" name="Initial" source="_F5ZtgDuOEemh7Jv-t4KSvQ" target="_F5gbMDuOEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_SmJs8DuOEemh7Jv-t4KSvQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Player2Broker] Starting up!&quot;);</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_h2VScDuOEemh7Jv-t4KSvQ" name="" kind="external" source="_F5gbMDuOEemh7Jv-t4KSvQ" target="_geIwcDuOEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_cID3cEs5EemM1b60lyH_SQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>mqtt.connect(&quot;m16.cloudmqtt.com&quot;, 15723, &quot;Ting&quot;,  &quot;queens&quot;);</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_lkXqcDuOEemh7Jv-t4KSvQ" event="_kXJpYDuOEemh7Jv-t4KSvQ" port="_8mf-wDuNEemh7Jv-t4KSvQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_zryREDuOEemh7Jv-t4KSvQ" name="" kind="external" source="_geIwcDuOEemh7Jv-t4KSvQ" target="_tnaT0DuOEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_x3AtkD-8EemACYDE-qKd5g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Player2Broker] Connected to Server!&quot;);&#xD;
mqtt.publish(&quot;PlayerConnected&quot;,&quot;Player2Connected&quot;);&#xD;
log.log(&quot;[Player2Broker] Waiting for Player 1 move&quot;);&#xD;
mqtt.subscribe(&quot;Player1MoveDone&quot;);&#xD;
&#xD;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_6kiRkDuOEemh7Jv-t4KSvQ" port="_xpUqEDuOEemh7Jv-t4KSvQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_ImxXQsnWEeiTgcmKwS4Zdw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_BYdccDuPEemh7Jv-t4KSvQ" name="" kind="external" source="_geIwcDuOEemh7Jv-t4KSvQ" target="_-0j8UDuOEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_FXbMYDuPEemh7Jv-t4KSvQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Player2] Connection error %s&quot;,errno);</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_BxlHEDuPEemh7Jv-t4KSvQ" port="_xpUqEDuOEemh7Jv-t4KSvQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_ImxXRMnWEeiTgcmKwS4Zdw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_O01YoDuoEemh7Jv-t4KSvQ" name="" kind="external" source="_tnaT0DuOEemh7Jv-t4KSvQ" target="_nlzv0EBGEemqJPrZwKkwWQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_6HZBoD-3EemACYDE-qKd5g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Player2Broker] Player 1 selected move: %s&quot;, payload);&#xD;
log.log(&quot;[Player2Broker] Sending Player 1 to board update&quot;);&#xD;
if(strcmp(payload,&quot;p1_castle&quot;)){&#xD;
	log.log(&quot;Player 1 castling&quot;);&#xD;
}&#xD;
board_update.Player1MoveMessage(strdup(payload)).send();&#xD;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_PUizcDuoEemh7Jv-t4KSvQ" port="_xpUqEDuOEemh7Jv-t4KSvQ">
              <event xmi:type="uml:CallEvent" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_ImxXQcnWEeiTgcmKwS4Zdw"/>
            </trigger>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_we51sD-9EemACYDE-qKd5g" name="" kind="external" source="_Ly0ZIDuoEemh7Jv-t4KSvQ" target="_n1OJgE2nEemGCdFy2wiJyg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_APi1MD_EEemACYDE-qKd5g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>using namespace std;&#xD;
log.log(&quot;[Player2Broker] Player 2 move valid, sending to Player 1...&quot;);&#xD;
&#xD;
char cstr[5] = {'\0'};&#xD;
cstr[0] = startCol + '0';&#xD;
cstr[1] = startRow + '0';&#xD;
cstr[2] = endCol + '0';&#xD;
cstr[3] = endRow + '0';&#xD;
&#xD;
if(Player2Wins){&#xD;
	GameOver = true;&#xD;
}&#xD;
log.log(&quot;[Player2Broker] Publishing to Player2MoveDone&quot;);&#xD;
mqtt.publish(&quot;Player2MoveDone&quot;,cstr);&#xD;
&#xD;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_i66aUD-_EemACYDE-qKd5g" event="_4CcfoD-9EemACYDE-qKd5g" port="_LTNbID-9EemACYDE-qKd5g"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_ludgAD-_EemACYDE-qKd5g" name="" kind="external" source="_Ly0ZIDuoEemh7Jv-t4KSvQ" target="_Ly0ZIDuoEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_uQtq8EAtEemqJPrZwKkwWQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Player2Broker] Player2 entered an invalid move, try again&quot;);</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_pZjRsD-_EemACYDE-qKd5g" event="_5Q1lYD-9EemACYDE-qKd5g" port="_LTNbID-9EemACYDE-qKd5g"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_vM9HYEBGEemqJPrZwKkwWQ" kind="external" source="_nlzv0EBGEemqJPrZwKkwWQ" target="_Ly0ZIDuoEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_nEiesEBaEemqJPrZwKkwWQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Player2Broker] Board updated with Player 1 move, moving to Player 2 turn&quot;);</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_CPcg4EBHEemqJPrZwKkwWQ" event="_AiFnMEBHEemqJPrZwKkwWQ" port="_bNFVEEBFEemqJPrZwKkwWQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_qMZcQE2nEemGCdFy2wiJyg" kind="external" source="_n1OJgE2nEemGCdFy2wiJyg" target="_tnaT0DuOEemh7Jv-t4KSvQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_MMjH4E2oEemGCdFy2wiJyg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Player2Broker] Waiting for Player 1 move&quot;);&#xD;
log.log(&quot;[Player2Broker] Subscribing to Player1MoveDone&quot;);&#xD;
mqtt.subscribe(&quot;Player1MoveDone&quot;);&#xD;
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_rY1aME2nEemGCdFy2wiJyg" name="Player2Wins" guard="_3A2mME2nEemGCdFy2wiJyg" kind="external" source="_n1OJgE2nEemGCdFy2wiJyg" target="_766pQE2jEemGCdFy2wiJyg">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_3A2mME2nEemGCdFy2wiJyg">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_3A2mMU2nEemGCdFy2wiJyg">
                <language>C++</language>
                <body>return (GameOver);</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_8t8E0E2nEemGCdFy2wiJyg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>    log.log(&quot;[Player2Broker] Publishing 1 to PlayerWins&quot;);
    mqtt.publish(&quot;PlayerWins&quot;,&quot;1&quot;);
    log.log(&quot;[Player2Broker] Game Over, Player 2 Wins&quot;);
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_19lioE24EemGCdFy2wiJyg" name="" kind="external" source="_nlzv0EBGEemqJPrZwKkwWQ" target="_766pQE2jEemGCdFy2wiJyg">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_8efq4E24EemGCdFy2wiJyg" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>    log.log(&quot;[Player2Broker] Game Over, Player 1 Wins&quot;);
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_2aEqUE24EemGCdFy2wiJyg" event="_sQ8eME24EemGCdFy2wiJyg" port="_KxGk8E2lEemGCdFy2wiJyg"/>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_F5ZtgDuOEemh7Jv-t4KSvQ" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_F5gbMDuOEemh7Jv-t4KSvQ" name="State1"/>
          <subvertex xmi:type="uml:State" xmi:id="_geIwcDuOEemh7Jv-t4KSvQ" name="Connecting"/>
          <subvertex xmi:type="uml:State" xmi:id="_tnaT0DuOEemh7Jv-t4KSvQ" name="Player1Turn"/>
          <subvertex xmi:type="uml:State" xmi:id="_-0j8UDuOEemh7Jv-t4KSvQ" name="error"/>
          <subvertex xmi:type="uml:State" xmi:id="_Ly0ZIDuoEemh7Jv-t4KSvQ" name="Player2_turn">
            <entry xmi:type="uml:OpaqueBehavior" xmi:id="_BmabID-8EemACYDE-qKd5g" name="Entry" isReentrant="false">
              <language>C++</language>
              <body>using namespace std;&#xD;
&#xD;
//Get Player 2 moves&#xD;
log.log(&quot;[Player2Broker]--------------Player 2 turn&quot;);&#xD;
string startMove;&#xD;
string endMove;&#xD;
cout&lt;&lt;&quot;Player 2 enter start move: &quot;;&#xD;
getline(cin,startMove);&#xD;
cout&lt;&lt;&quot;Player 2 enter end move: &quot;;&#xD;
getline(cin,endMove);&#xD;
&#xD;
//Validate Player2 moves&#xD;
move_valid.Player2Move(&amp;startMove[0u],&amp;endMove[0u]).send();</body>
            </entry>
          </subvertex>
          <subvertex xmi:type="uml:State" xmi:id="_nlzv0EBGEemqJPrZwKkwWQ" name="Updating Board"/>
          <subvertex xmi:type="uml:State" xmi:id="_766pQE2jEemGCdFy2wiJyg" name="Game Over"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_n1OJgE2nEemGCdFy2wiJyg" kind="choice"/>
        </region>
      </ownedBehavior>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_3Z7MMDuNEemh7Jv-t4KSvQ" name="startGame">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_3ZxbMDuNEemh7Jv-t4KSvQ" name="startGame">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_3aLq4DuNEemh7Jv-t4KSvQ" client="_3ZxbMDuNEemh7Jv-t4KSvQ" supplier="_3aEWIDuNEemh7Jv-t4KSvQ" contract="_3aEWIDuNEemh7Jv-t4KSvQ"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_3aiQMDuNEemh7Jv-t4KSvQ" client="_3ZxbMDuNEemh7Jv-t4KSvQ" supplier="_3aZtUTuNEemh7Jv-t4KSvQ" contract="_3aZtUTuNEemh7Jv-t4KSvQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_3aEWIDuNEemh7Jv-t4KSvQ" name="startGame"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_3aP8UDuNEemh7Jv-t4KSvQ" name="startGame~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_kWUi8DuOEemh7Jv-t4KSvQ" name="start"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_3aX4IDuNEemh7Jv-t4KSvQ" client="_3ZxbMDuNEemh7Jv-t4KSvQ" supplier="_3aP8UDuNEemh7Jv-t4KSvQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_3aZtUDuNEemh7Jv-t4KSvQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_3aZtUTuNEemh7Jv-t4KSvQ" name="startGameIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_3akFYDuNEemh7Jv-t4KSvQ" client="_3ZxbMDuNEemh7Jv-t4KSvQ" supplier="_3aZtUTuNEemh7Jv-t4KSvQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_kXJpYDuOEemh7Jv-t4KSvQ" operation="_kWUi8DuOEemh7Jv-t4KSvQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_-w7mUD-8EemACYDE-qKd5g" name="Board" classifierBehavior="_uOYAsD_BEemACYDE-qKd5g" isActive="true">
      <ownedAttribute xmi:type="uml:Port" xmi:id="_N_kTsD-9EemACYDE-qKd5g" name="move_valid" visibility="public" type="_GkELcD-9EemACYDE-qKd5g" isOrdered="true" aggregation="composite" isBehavior="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_yXWBMD_BEemACYDE-qKd5g" name="log" visibility="protected" isOrdered="true" aggregation="composite" isBehavior="true" isService="false">
        <type xmi:type="uml:Collaboration" href="pathmap://UMLRTRTSLIB/UMLRT-RTS.uml#_6kIb0IeXEeSVyrlWP4nYew"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_3OgN4EBEEemqJPrZwKkwWQ" name="P2MoveValid" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        <defaultValue xmi:type="uml:LiteralBoolean" xmi:id="_665nIEBEEemqJPrZwKkwWQ"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_dMdL0EBFEemqJPrZwKkwWQ" name="board_update" visibility="public" type="_YQBuEEBFEemqJPrZwKkwWQ" isOrdered="true" aggregation="composite" isBehavior="true" isService="true"/>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_57qAkEBYEemqJPrZwKkwWQ" name="startCol">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_AHG2MEBZEemqJPrZwKkwWQ" name="startRow">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_AOGPAEBZEemqJPrZwKkwWQ" name="endCol">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_ASowwEBZEemqJPrZwKkwWQ" name="endRow">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_kOo8MEj4EemQ047qdi82Ug" name="KingRow" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_6H8KwEj4EemQ047qdi82Ug" value="0"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Property" xmi:id="_qcdwYEj4EemQ047qdi82Ug" name="KingCol" visibility="public">
        <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        <defaultValue xmi:type="uml:LiteralInteger" xmi:id="_8ruWIEj4EemQ047qdi82Ug" value="4"/>
      </ownedAttribute>
      <ownedAttribute xmi:type="uml:Port" xmi:id="_NxOuEE2lEemGCdFy2wiJyg" name="playerWins" visibility="public" type="_IHT4ME2lEemGCdFy2wiJyg" isOrdered="true" aggregation="composite" isBehavior="true" isService="true"/>
      <ownedBehavior xmi:type="uml:StateMachine" xmi:id="_uOYAsD_BEemACYDE-qKd5g" name="Board_sm" isReentrant="false">
        <region xmi:type="uml:Region" xmi:id="_uOqUkD_BEemACYDE-qKd5g" name="Region">
          <transition xmi:type="uml:Transition" xmi:id="_uO9PgD_BEemACYDE-qKd5g" name="Initial" source="_uOvNED_BEemACYDE-qKd5g" target="_uO5lID_BEemACYDE-qKd5g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_wx6UcD_BEemACYDE-qKd5g" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Board] Starting up&quot;);</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_qOukwEBEEemqJPrZwKkwWQ" name="" kind="external" source="_RYXCMD_CEemACYDE-qKd5g" target="_o0TOIEBEEemqJPrZwKkwWQ">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_QtfwwEBFEemqJPrZwKkwWQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>using namespace std;&#xD;
char * startMove = strdup(start);&#xD;
char * endMove = strdup(end);&#xD;
&#xD;
&#xD;
if (strlen(startMove) > 2 || strlen(endMove) > 2 || isalpha(startMove[0]) == 0 || isalpha(endMove[0]) == 0 || isdigit(startMove[1]) == 0 || isdigit(endMove[1]) == 0){&#xD;
	P2MoveValid = false;&#xD;
	log.log(&quot;[Board] Command line argument invalid, please input a valid start move like 'a2' and valid end move like 'a3'&quot;);&#xD;
}&#xD;
else{&#xD;
	startRow = (startMove[1] - '0') - 1;&#xD;
	endRow = (endMove[1] - '0') - 1;&#xD;
&#xD;
	startCol = GetColIndex(startMove);&#xD;
	endCol = GetColIndex(endMove);&#xD;
	P2MoveValid = validateMove(startCol, startRow, endCol, endRow);&#xD;
}&#xD;
</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_0qlfoEBEEemqJPrZwKkwWQ" event="_67-RgD-9EemACYDE-qKd5g" port="_N_kTsD-9EemACYDE-qKd5g"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_s5AZsEBEEemqJPrZwKkwWQ" kind="external" source="_o0TOIEBEEemqJPrZwKkwWQ" target="_pjunAEtoEemM1b60lyH_SQ"/>
          <transition xmi:type="uml:Transition" xmi:id="_utzYIEBEEemqJPrZwKkwWQ" name="Player2 Move Invalid" guard="_-9sHIEBEEemqJPrZwKkwWQ" kind="external" source="_o0TOIEBEEemqJPrZwKkwWQ" target="_RYXCMD_CEemACYDE-qKd5g">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_-9sHIEBEEemqJPrZwKkwWQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_-914IEBEEemqJPrZwKkwWQ">
                <language>C++</language>
                <body>return (P2MoveValid == false);</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_DrQCcEBFEemqJPrZwKkwWQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Board] Player2 gave an invalid move&quot;);&#xD;
move_valid.Player2MoveInvalid().send();</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_02_ugEBFEemqJPrZwKkwWQ" name="" kind="external" source="_uO5lID_BEemACYDE-qKd5g" target="_RYXCMD_CEemACYDE-qKd5g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_gXVQwEBjEemqJPrZwKkwWQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>using namespace std;&#xD;
&#xD;
if(strcmp(Player1Move,&quot;p1_castle&quot;) == 0){&#xD;
	//Update Board with Player 1 castle&#xD;
	log.log(&quot;[Board] Updating board with Player 1 castling&quot;);&#xD;
	ChessBoard[0][2] = -2;&#xD;
	ChessBoard[0][1] = -6;&#xD;
	ChessBoard[0][0] = 0;&#xD;
	ChessBoard[0][4] = 0;&#xD;
	board_update.BoardUpdated().send();&#xD;
	printBoard();&#xD;
}&#xD;
else{&#xD;
	//Convert Player 1 message to integer indexes&#xD;
	int P1_startCol = Player1Move[0] - '0';&#xD;
	int P1_startRow = Player1Move[1] - '0';&#xD;
	int P1_endCol = Player1Move[2] - '0';&#xD;
	int P1_endRow = Player1Move[3] - '0';&#xD;
&#xD;
	//Update Board with Player 1 moves&#xD;
	log.log(&quot;[Board] Updating board with Player 1 moves&quot;);&#xD;
	if(ChessBoard[P1_endRow][P1_endCol] == 6){&#xD;
		playerWins.Player1Wins().send();&#xD;
	}&#xD;
	else{&#xD;
		board_update.BoardUpdated().send();&#xD;
	}&#xD;
		updateBoard(P1_startCol,P1_startRow,P1_endCol,P1_endRow);&#xD;
		printBoard();&#xD;
}</body>
            </effect>
            <trigger xmi:type="uml:Trigger" xmi:id="_Ku56UEBkEemqJPrZwKkwWQ" event="_YXDGoEBGEemqJPrZwKkwWQ" port="_dMdL0EBFEemqJPrZwKkwWQ"/>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_wiHVcEtoEemM1b60lyH_SQ" kind="external" source="_pjunAEtoEemM1b60lyH_SQ" target="_uO5lID_BEemACYDE-qKd5g">
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_zL8ecEtoEemM1b60lyH_SQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>    log.log(&quot;[Board] Player 2 move valid, moving to Player 1 Turn&quot;);&#xD;
    updateBoard(startCol,startRow,endCol,endRow);&#xD;
//If the pawn reaches the other end of board, promote it to Queen&#xD;
if(ChessBoard[endRow][endCol] == 1 &amp;&amp; endRow == 0){&#xD;
	ChessBoard[endRow][endCol] = 5;&#xD;
}&#xD;
&#xD;
    move_valid.Player2MoveValid(startCol, startRow, endCol, endRow,false).send();&#xD;
    printBoard();&#xD;
</body>
            </effect>
          </transition>
          <transition xmi:type="uml:Transition" xmi:id="_x50IMEtoEemM1b60lyH_SQ" guard="_7spUMEtoEemM1b60lyH_SQ" kind="external" source="_pjunAEtoEemM1b60lyH_SQ" target="_GvXVYEtWEemM1b60lyH_SQ">
            <ownedRule xmi:type="uml:Constraint" xmi:id="_7spUMEtoEemM1b60lyH_SQ">
              <specification xmi:type="uml:OpaqueExpression" xmi:id="_7ss-kEtoEemM1b60lyH_SQ">
                <language>C++</language>
                <body>return (ChessBoard[endRow][endCol] == -6);</body>
              </specification>
            </ownedRule>
            <effect xmi:type="uml:OpaqueBehavior" xmi:id="_0I2yoEtoEemM1b60lyH_SQ" name="Effect" isReentrant="false">
              <language>C++</language>
              <body>log.log(&quot;[Board] Player 2 wins&quot;);&#xD;
updateBoard(startCol,startRow,endCol,endRow);&#xD;
move_valid.Player2MoveValid(startCol, startRow, endCol, endRow,true).send();&#xD;
printBoard();</body>
            </effect>
          </transition>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_uOvNED_BEemACYDE-qKd5g" kind="initial"/>
          <subvertex xmi:type="uml:State" xmi:id="_uO5lID_BEemACYDE-qKd5g" name="Player1Turn"/>
          <subvertex xmi:type="uml:State" xmi:id="_RYXCMD_CEemACYDE-qKd5g" name="Player2Turn"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_o0TOIEBEEemqJPrZwKkwWQ" kind="choice"/>
          <subvertex xmi:type="uml:State" xmi:id="_GvXVYEtWEemM1b60lyH_SQ" name="Player1KingCaptured"/>
          <subvertex xmi:type="uml:Pseudostate" xmi:id="_pjunAEtoEemM1b60lyH_SQ" kind="choice"/>
        </region>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_JZnAgEBSEemqJPrZwKkwWQ" specification="_vFd-UEBREemqJPrZwKkwWQ">
        <language>C++</language>
        <body>using namespace std;&#xD;
char charcol1 = col[0];&#xD;
int startcol;&#xD;
switch(charcol1){&#xD;
	case 'A':&#xD;
	case 'a':&#xD;
		startcol = 0; &#xD;
		break;&#xD;
    	case 'B':&#xD;
	case 'b': &#xD;
		startcol = 1; &#xD;
		break;&#xD;
    	case 'C':&#xD;
	case 'c': &#xD;
		startcol = 2; &#xD;
		break;&#xD;
    	case 'D':&#xD;
	case 'd':  &#xD;
		startcol = 3; &#xD;
		break;&#xD;
    	case 'E': &#xD;
	case 'e': &#xD;
		startcol = 4; &#xD;
		break;&#xD;
    	case 'F': &#xD;
	case 'f': &#xD;
		startcol = 5; &#xD;
		break;&#xD;
    	case 'G': &#xD;
	case 'g': &#xD;
		startcol = 6; &#xD;
		break;&#xD;
    	case 'H': &#xD;
	case 'h': &#xD;
		startcol = 7; &#xD;
		break;&#xD;
}&#xD;
&#xD;
return startcol;&#xD;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Q-FekEBSEemqJPrZwKkwWQ">
        <language>C++</language>
        <body>using namespace std;&#xD;
char charcol1 = endCol[0];&#xD;
int endcol;&#xD;
switch(charcol1){&#xD;
	case 'A': endcol = 0; break;&#xD;
	case 'B': endcol = 1; break;&#xD;
	case 'C': endcol = 2; break;&#xD;
	case 'D': endcol = 3; break;&#xD;
	case 'E': endl = 4; break;&#xD;
	case 'F': startcol = 5; break;&#xD;
	case 'G': startcol = 6; break;&#xD;
	case 'H': startcol = 7; break;&#xD;
}&#xD;
return startcol;</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_cdAp4EBbEemqJPrZwKkwWQ" specification="_K0iXUEBbEemqJPrZwKkwWQ">
        <language>C++</language>
        <body>    ChessBoard[endRow][endCol] = ChessBoard[startRow][startCol];&#xD;
    ChessBoard[startRow][startCol] = 0;&#xD;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_NV8NAEBvEemqJPrZwKkwWQ" specification="_Bp-8MEBvEemqJPrZwKkwWQ">
        <language>C++</language>
        <body>    using namespace std;&#xD;
    for(int i = 0; i &lt; 8 ; i++){&#xD;
    for(int j = 0; j &lt; 8; j++){&#xD;
    cout&lt;&lt;ChessBoard[i][j];&#xD;
    }&#xD;
    cout&lt;&lt;&quot;\n&quot;;&#xD;
 }&#xD;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_y0jMYEO4Eem3r6TfPP7Ezw" specification="_L_lG4EO4Eem3r6TfPP7Ezw">
        <language>C++</language>
        <body>bool moveValid = false;&#xD;
if(ChessBoard[startRow][startCol] == 0){&#xD;
	log.log(&quot;[Board]Player selected empty as start&quot;);&#xD;
	return moveValid;&#xD;
}&#xD;
if(ChessBoard[startRow][startCol] &lt; 0){&#xD;
	log.log(&quot;[Board]You selected another Players piece&quot;);&#xD;
	return moveValid;&#xD;
}&#xD;
if(ChessBoard[endRow][endCol] > 0){&#xD;
    	log.log(&quot;[Board]Selected End move occupied by one of your pieces&quot;);&#xD;
	return moveValid;&#xD;
}&#xD;
//Player selected a pawn&#xD;
if(ChessBoard[startRow][startCol] == 1){&#xD;
	//Pawns can move two steps on the first move&#xD;
	if(startRow == 6){&#xD;
		//Moving a pawn one step into empty space&#xD;
		if(startCol == endCol &amp;&amp; startRow - endRow ==1 &amp;&amp; ChessBoard[endRow][endCol] == 0){&#xD;
			return moveValid = true;&#xD;
		}&#xD;
		//Moving a pawn two steps into empty space&#xD;
		if(startCol == endCol &amp;&amp; startRow - endRow ==2 &amp;&amp; ChessBoard[endRow][endCol] == 0){&#xD;
			return moveValid = true;&#xD;
		}&#xD;
		//Capturing a piece on right diagonal&#xD;
		if(abs(endCol - startCol) == 1 &amp;&amp; startRow - endRow== 1 &amp;&amp; ChessBoard[endRow][endCol] &lt; 0){&#xD;
			return moveValid = true;&#xD;
		}&#xD;
&#xD;
	}&#xD;
	else{&#xD;
		//Moving a pawn one step into empty space&#xD;
		if(startCol == endCol &amp;&amp; startRow - endRow ==1 &amp;&amp; ChessBoard[endRow][endCol] == 0){&#xD;
			return moveValid = true;&#xD;
		}&#xD;
		//Capturing a piece on right diagonal&#xD;
		if(abs(endCol - startCol) == 1 &amp;&amp; startRow - endRow== 1 &amp;&amp; ChessBoard[endRow][endCol] &lt; 0){&#xD;
			return moveValid = true;&#xD;
		}&#xD;
	}&#xD;
	log.log(&quot;[Board] Pawns can only move one step forward, and capture diagonally&quot;);&#xD;
	return moveValid = false;&#xD;
}&#xD;
&#xD;
//Player selected a rook&#xD;
if(ChessBoard[startRow][startCol] == 2){&#xD;
	log.log(&quot;Player 1 selected a rook&quot;);&#xD;
	//Moving into an empty cell in the same column&#xD;
	if(startCol == endCol &amp;&amp; ChessBoard[endRow][endCol] &lt;= 0){&#xD;
		if(PieceOnWay(startCol,startRow,endCol,endRow,ChessBoard[startRow][startCol])){&#xD;
			return moveValid = false;&#xD;
		}&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	//Moving into an empty cell in the same row&#xD;
	if(startRow == endRow &amp;&amp; ChessBoard[endRow][endCol] &lt;= 0){&#xD;
		if(PieceOnWay(startCol,startRow,endCol,endRow,ChessBoard[startRow][startCol])){&#xD;
			return moveValid = false;&#xD;
		}&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	log.log(&quot;[Board] Rooks can only move horizontally or vertically&quot;);&#xD;
	return moveValid;&#xD;
}&#xD;
//Player selected a knight&#xD;
if(ChessBoard[startRow][startCol] == 3){&#xD;
	log.log(&quot;Player 1 selected a knight&quot;);&#xD;
	//Knight moving in Upper left L&#xD;
	if(abs(endRow - startRow) == 2 &amp;&amp; abs(startCol - endCol) == 1){&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	if(abs(endRow - startRow) == 1 &amp;&amp; abs(endCol - startCol) == 2){&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	log.log(&quot;[Board] Knights can only move in L formations&quot;);&#xD;
	return moveValid;&#xD;
}&#xD;
//Player selected a bishop&#xD;
if(ChessBoard[startRow][startCol] == 4){&#xD;
	log.log(&quot;Player 1 selected a bishop&quot;);&#xD;
	//Bishop moving in Upper Left diagonal&#xD;
	if((abs(startRow - endRow) == abs(startCol - endCol))){&#xD;
		if(PieceOnWay(startCol,startRow,endCol,endRow,ChessBoard[startRow][startCol])){&#xD;
			return moveValid = false;&#xD;
		}&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	log.log(&quot;[Board]Bishops can only move diagonally&quot;);&#xD;
	return moveValid;&#xD;
}&#xD;
//Player selected the Queen&#xD;
if(ChessBoard[startRow][startCol] == 5){&#xD;
    	log.log(&quot;Player 2 selected Queen&quot;);&#xD;
    	if(startCol == endCol){&#xD;
    		if(PieceOnWay(startCol,startRow,endCol,endRow,ChessBoard[startRow][startCol])){&#xD;
    			log.log(&quot;[Board] There is a piece in the way of desired path&quot;);&#xD;
    			return moveValid = false;&#xD;
    		}&#xD;
    		return moveValid = true;&#xD;
    	}&#xD;
    	if(startRow == endRow){&#xD;
    		if(PieceOnWay(startCol,startRow,endCol,endRow,ChessBoard[startRow][startCol])){&#xD;
    			log.log(&quot;[Board] There is a piece in the way of desired path&quot;);&#xD;
    			return moveValid = false;&#xD;
    		}&#xD;
    		return moveValid = true;&#xD;
    	}&#xD;
    //Queen moving in Upper Left diagonal&#xD;
    	if((abs(startRow - endRow) == abs(startCol - endCol))){&#xD;
    		if(PieceOnWay(startCol,startRow,endCol,endRow,ChessBoard[startRow][startCol])){&#xD;
    			log.log(&quot;[Board] There is a piece in the way of desired path&quot;);&#xD;
    			return moveValid = false;&#xD;
    		}&#xD;
    		return moveValid = true;&#xD;
    	}&#xD;
	log.log(&quot;[Board] Queen can only move diagonally, horizontally and vertically&quot;);&#xD;
    	return moveValid;&#xD;
}&#xD;
//Player selected the King&#xD;
if(ChessBoard[startRow][startCol] == 6){&#xD;
	log.log(&quot;Player 1 selected the King&quot;);&#xD;
	//Moving one step in the same column&#xD;
	if(startCol == endCol &amp;&amp; abs(startRow - endRow) ==1){&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	//Moving one step in the same row&#xD;
	if(startRow == endRow &amp;&amp; abs(startCol - endCol) ==1){&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	//Moving one step along any diagonal&#xD;
	if(abs(startCol - endCol) == 1 &amp;&amp; abs(startRow - endRow) == 1 ){&#xD;
		return moveValid = true;&#xD;
	}&#xD;
	log.log(&quot;[Board] King can only move one step in any direction&quot;);&#xD;
	return moveValid;&#xD;
}&#xD;
 </body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_4rC7wEhEEemQ047qdi82Ug" specification="_ehy68EhEEemQ047qdi82Ug">
        <language>C++</language>
        <body>int rows_dist = abs(startRow - endRow);&#xD;
int cols_dist = abs(startCol - endCol);&#xD;
if(piece == 2){&#xD;
    //Player 1 Rook moving down the board&#xD;
	if(startRow &lt; endRow){&#xD;
    		log.log(&quot;Rook moving down&quot;);&#xD;
    		for(int i = startRow + 1; i &lt; endRow ; i++){&#xD;
    			if(ChessBoard[i][startCol] > 0 ){&#xD;
    			return true;&#xD;
    			}&#xD;
    }&#xD;
    	return false;&#xD;
    }&#xD;
    else if (startRow > endRow){&#xD;
    	log.log(&quot;Rook moving up&quot;);&#xD;
    	for(int i = startRow -1; i > endRow; i--){&#xD;
    		if(ChessBoard[i][startCol] > 0 ){&#xD;
    			return true;&#xD;
    		}&#xD;
    }&#xD;
    	return false;	&#xD;
    }&#xD;
    else if(startCol &lt; endCol){&#xD;
    	for(int i = startCol + 1; i &lt; endCol ; i++){&#xD;
    		if(ChessBoard[startRow][i] > 0 ){&#xD;
    			return true;&#xD;
    		}&#xD;
    }&#xD;
    	return false;&#xD;
    }&#xD;
    else{&#xD;
    	for(int i = startCol - 1; i > endCol; i--){&#xD;
    		if(ChessBoard[startRow][i] > 0 ){&#xD;
    			return true;&#xD;
    		}&#xD;
    }&#xD;
    		return false;&#xD;
    	}&#xD;
    }&#xD;
    else if(piece == 4){&#xD;
    //Bishop moving in upper left&#xD;
    	if((startRow > endRow) &amp;&amp; (startCol > endCol)){&#xD;
    		log.log(&quot;Bishop moving upper left&quot;);&#xD;
    		for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    			log.log(ChessBoard[startRow-i][startCol-i]);&#xD;
    			if(ChessBoard[startRow-i][startCol-i] > 0 ){&#xD;
    				return true;&#xD;
    			}	&#xD;
    }&#xD;
    	return false;&#xD;
    }&#xD;
    //Bishop moving in upper right&#xD;
    else if((startRow > endRow) &amp;&amp; (startCol &lt; endCol)){&#xD;
    	for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    		log.log(ChessBoard[startRow-i][startCol+i]);&#xD;
    		if(ChessBoard[startRow-i][startCol+i] > 0 ){&#xD;
    			return true;&#xD;
    		}	&#xD;
    }&#xD;
    	return false;&#xD;
    }&#xD;
    //Bishop moving in lower left&#xD;
    else if((startRow &lt; endRow) &amp;&amp; (startCol > endCol)){&#xD;
    	log.log(&quot;Bishop moving upper left&quot;);&#xD;
    	for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    		if(ChessBoard[startRow+i][startCol-i] > 0 ){&#xD;
    			return true;&#xD;
    		}	&#xD;
    }&#xD;
    	return false;&#xD;
    }&#xD;
    else if((startRow &lt; endRow) &amp;&amp; (startCol &lt; endCol)){&#xD;
    	for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    		log.log(ChessBoard[startRow+i][startCol+i]);&#xD;
    		if(ChessBoard[startRow+i][startCol+i] > 0 ){&#xD;
    			return true;&#xD;
    			}	&#xD;
    	}&#xD;
    	return false;&#xD;
    }&#xD;
   }&#xD;
    else if(piece == 5){&#xD;
    //Queen moving left or right&#xD;
    	if(startRow == endRow){&#xD;
    		if(startCol > endCol){&#xD;
    			for(int i = 1; i &lt; cols_dist; i ++){&#xD;
    			log.log(ChessBoard[startRow][startCol-i]);&#xD;
    				if(ChessBoard[startRow][startCol - i] > 0 ){&#xD;
    				return true;&#xD;
    				}&#xD;
    }&#xD;
    return false;&#xD;
    }&#xD;
    else{&#xD;
    	for(int i = 1; i &lt; cols_dist; i ++){&#xD;
    		log.log(ChessBoard[startRow][startCol+i]);&#xD;
    		if(ChessBoard[startRow][startCol + i] > 0 ){&#xD;
    			return true;&#xD;
    		}&#xD;
    }&#xD;
    return false;&#xD;
    }&#xD;
    }&#xD;
    //Queen moving up or down&#xD;
    else if(startCol == endCol){&#xD;
    	if(startRow > endRow){&#xD;
    		for(int i = 1; i &lt; rows_dist; i ++){&#xD;
    		log.log(ChessBoard[startRow-i][startCol]);&#xD;
    			if(ChessBoard[startRow-i][startCol] > 0 ){&#xD;
    				return true;&#xD;
    			}&#xD;
    }&#xD;
    	return false;&#xD;
    }&#xD;
    else{&#xD;
    	for(int i = 1; i &lt; rows_dist; i ++){&#xD;
    	log.log(ChessBoard[startRow+i][startCol]);&#xD;
    		if(ChessBoard[startRow+i][startCol] > 0 ){&#xD;
    			return true;&#xD;
    		}&#xD;
    }&#xD;
    return false;&#xD;
    }&#xD;
    }&#xD;
    //Queen moving diagonally&#xD;
    else{&#xD;
    //Queen moving in upper left&#xD;
    	if((startRow > endRow) &amp;&amp; (startCol > endCol)){&#xD;
    		for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    			log.log(ChessBoard[startRow-i][startCol-i]);&#xD;
    			if(ChessBoard[startRow-i][startCol-i] > 0 ){&#xD;
    				return true;&#xD;
    				}	&#xD;
    		}&#xD;
    return false;&#xD;
    }&#xD;
    //Queen moving in upper right&#xD;
    else if((startRow > endRow) &amp;&amp; (startCol &lt; endCol)){&#xD;
    	for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    		log.log(ChessBoard[startRow-i][startCol+i]);&#xD;
    		if(ChessBoard[startRow-i][startCol+i] > 0 ){&#xD;
    			return true;&#xD;
    			}	&#xD;
    		}&#xD;
    return false;&#xD;
    }&#xD;
    //Queen moving in lower left&#xD;
    else if((startRow &lt; endRow) &amp;&amp; (startCol > endCol)){&#xD;
    	for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    		log.log(ChessBoard[startRow+i][startCol-i]);&#xD;
    		if(ChessBoard[startRow+i][startCol-i] > 0 ){&#xD;
    			return true;&#xD;
    			}	&#xD;
    		}&#xD;
    return false;&#xD;
    }&#xD;
    else if((startRow &lt; endRow) &amp;&amp; (startCol &lt; endCol)){&#xD;
    	for(int i = 1 ; i &lt; rows_dist ; i++){&#xD;
    		log.log(ChessBoard[startRow+i][startCol+i]);&#xD;
    		if(ChessBoard[startRow+i][startCol+i] > 0 ){&#xD;
    			return true;&#xD;
    			}	&#xD;
    		}&#xD;
    	return false;&#xD;
    	}&#xD;
    }&#xD;
}&#xD;
 &#xD;
</body>
      </ownedBehavior>
      <ownedBehavior xmi:type="uml:OpaqueBehavior" xmi:id="_Yv11EEjhEemQ047qdi82Ug">
        <language>C++</language>
        <body>using namespace std;&#xD;
if(kingRow == 0){&#xD;
	int coords[] = {,23,65,42,13};&#xD;
&#xD;
&#xD;
}&#xD;
else{&#xD;
&#xD;
&#xD;
}</body>
      </ownedBehavior>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_vFd-UEBREemqJPrZwKkwWQ" name="GetColIndex" concurrency="guarded" method="_JZnAgEBSEemqJPrZwKkwWQ">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_2CZUMEBREemqJPrZwKkwWQ" name="col">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_DpEyAEBiEemqJPrZwKkwWQ" name="index" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_K0iXUEBbEemqJPrZwKkwWQ" name="updateBoard" concurrency="guarded" method="_cdAp4EBbEemqJPrZwKkwWQ">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_OkxuwEBbEemqJPrZwKkwWQ" name="startCol">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_Qoy08EBbEemqJPrZwKkwWQ" name="startRow">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_RYqLoEBbEemqJPrZwKkwWQ" name="endCol">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_UuffAEBbEemqJPrZwKkwWQ" name="endRow">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_Bp-8MEBvEemqJPrZwKkwWQ" name="printBoard" concurrency="guarded" method="_NV8NAEBvEemqJPrZwKkwWQ"/>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_L_lG4EO4Eem3r6TfPP7Ezw" name="validateMove" concurrency="guarded" method="_y0jMYEO4Eem3r6TfPP7Ezw">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_TLFEQEO4Eem3r6TfPP7Ezw" name="startCol">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_WATk8EO4Eem3r6TfPP7Ezw" name="startRow">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_YCrsYEO4Eem3r6TfPP7Ezw" name="endCol">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_ZghjYEO4Eem3r6TfPP7Ezw" name="endRow">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_b3UboEO4Eem3r6TfPP7Ezw" name="moveValid" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#Boolean"/>
        </ownedParameter>
      </ownedOperation>
      <ownedOperation xmi:type="uml:Operation" xmi:id="_ehy68EhEEemQ047qdi82Ug" name="PieceOnWay" concurrency="guarded" method="_4rC7wEhEEemQ047qdi82Ug">
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_iz5CQEhEEemQ047qdi82Ug" name="startCol">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_lVNvgEhEEemQ047qdi82Ug" name="startRow">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_m8IC8EhEEemQ047qdi82Ug" name="endCol">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_pbMtcEhEEemQ047qdi82Ug" name="endRow">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_s2Op4EhEEemQ047qdi82Ug" name="blocked" direction="return">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
        </ownedParameter>
        <ownedParameter xmi:type="uml:Parameter" xmi:id="_e8pOcEhFEemQ047qdi82Ug" name="piece">
          <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
        </ownedParameter>
      </ownedOperation>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_GkIc4D-9EemACYDE-qKd5g" name="move_valid">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_GkELcD-9EemACYDE-qKd5g" name="move_valid">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_GkRm0D-9EemACYDE-qKd5g" client="_GkELcD-9EemACYDE-qKd5g" supplier="_GkN8cD-9EemACYDE-qKd5g" contract="_GkN8cD-9EemACYDE-qKd5g"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_Gkg3Yj-9EemACYDE-qKd5g" client="_GkELcD-9EemACYDE-qKd5g" supplier="_Gkg3YD-9EemACYDE-qKd5g" contract="_Gkg3YD-9EemACYDE-qKd5g"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_GkN8cD-9EemACYDE-qKd5g" name="move_valid">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_67GHwD-9EemACYDE-qKd5g" name="Player2Move">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_8X1LgD-9EemACYDE-qKd5g" name="start">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_Dw0LQD--EemACYDE-qKd5g" name="end">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_GkXtcD-9EemACYDE-qKd5g" name="move_valid~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_4Bju0D-9EemACYDE-qKd5g" name="Player2MoveValid">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_s-74AEBDEemqJPrZwKkwWQ" name="startCol">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_ts04wEBDEemqJPrZwKkwWQ" name="startRow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_uKnoAEBDEemqJPrZwKkwWQ" name="endCol">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_uf7JoEBDEemqJPrZwKkwWQ" name="endRow">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_7wRIABydEduyofBvg4RL2w"/>
          </ownedParameter>
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_lJlCoE2nEemGCdFy2wiJyg" name="Player2Wins">
            <type xmi:type="uml:PrimitiveType" href="pathmap://PapyrusC_Cpp_LIBRARIES/AnsiCLibrary.uml#_vAIV4I7PEdySGvm5GN66HA"/>
          </ownedParameter>
        </ownedOperation>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_5QmU0D-9EemACYDE-qKd5g" name="Player2MoveInvalid"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_GkXtcj-9EemACYDE-qKd5g" client="_GkELcD-9EemACYDE-qKd5g" supplier="_GkXtcD-9EemACYDE-qKd5g"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_GkXtcz-9EemACYDE-qKd5g" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_Gkg3YD-9EemACYDE-qKd5g" name="move_validIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_Gkg3Yz-9EemACYDE-qKd5g" client="_GkELcD-9EemACYDE-qKd5g" supplier="_Gkg3YD-9EemACYDE-qKd5g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_4CcfoD-9EemACYDE-qKd5g" operation="_4Bju0D-9EemACYDE-qKd5g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_5Q1lYD-9EemACYDE-qKd5g" operation="_5QmU0D-9EemACYDE-qKd5g"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_67-RgD-9EemACYDE-qKd5g" operation="_67GHwD-9EemACYDE-qKd5g"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Package" xmi:id="_YQLfEEBFEemqJPrZwKkwWQ" name="board_update">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_YQBuEEBFEemqJPrZwKkwWQ" name="board_update">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_YQUpAUBFEemqJPrZwKkwWQ" client="_YQBuEEBFEemqJPrZwKkwWQ" supplier="_YQLfEkBFEemqJPrZwKkwWQ" contract="_YQLfEkBFEemqJPrZwKkwWQ"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_YQeaBEBFEemqJPrZwKkwWQ" client="_YQBuEEBFEemqJPrZwKkwWQ" supplier="_YQeaAkBFEemqJPrZwKkwWQ" contract="_YQeaAkBFEemqJPrZwKkwWQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YQLfEkBFEemqJPrZwKkwWQ" name="board_update">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_YW58sEBGEemqJPrZwKkwWQ" name="Player1MoveMessage">
          <ownedParameter xmi:type="uml:Parameter" xmi:id="_6CnDgEBgEemqJPrZwKkwWQ" name="Player1Move">
            <type xmi:type="uml:PrimitiveType" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#String"/>
          </ownedParameter>
        </ownedOperation>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YQUpAkBFEemqJPrZwKkwWQ" name="board_update~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_Ah8dQEBHEemqJPrZwKkwWQ" name="BoardUpdated"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YQeaAEBFEemqJPrZwKkwWQ" client="_YQBuEEBFEemqJPrZwKkwWQ" supplier="_YQUpAkBFEemqJPrZwKkwWQ"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_YQeaAUBFEemqJPrZwKkwWQ" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_YQeaAkBFEemqJPrZwKkwWQ" name="board_updateIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_YQeaBUBFEemqJPrZwKkwWQ" client="_YQBuEEBFEemqJPrZwKkwWQ" supplier="_YQeaAkBFEemqJPrZwKkwWQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_YXDGoEBGEemqJPrZwKkwWQ" operation="_YW58sEBGEemqJPrZwKkwWQ"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_AiFnMEBHEemqJPrZwKkwWQ" operation="_Ah8dQEBHEemqJPrZwKkwWQ"/>
    </packagedElement>
    <packagedElement xmi:type="uml:Class" xmi:id="_7Rn6AEtFEemM1b60lyH_SQ" name="referee" isActive="true"/>
    <packagedElement xmi:type="uml:Package" xmi:id="_IHpPYE2lEemGCdFy2wiJyg" name="playerWins">
      <packagedElement xmi:type="uml:Collaboration" xmi:id="_IHT4ME2lEemGCdFy2wiJyg" name="playerWins">
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_IHxLME2lEemGCdFy2wiJyg" client="_IHT4ME2lEemGCdFy2wiJyg" supplier="_IHs5wE2lEemGCdFy2wiJyg" contract="_IHs5wE2lEemGCdFy2wiJyg"/>
        <interfaceRealization xmi:type="uml:InterfaceRealization" xmi:id="_IH8KUE2lEemGCdFy2wiJyg" client="_IHT4ME2lEemGCdFy2wiJyg" supplier="_IH344U2lEemGCdFy2wiJyg" contract="_IH344U2lEemGCdFy2wiJyg"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Interface" xmi:id="_IHs5wE2lEemGCdFy2wiJyg" name="playerWins"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_IHyZUE2lEemGCdFy2wiJyg" name="playerWins~">
        <ownedOperation xmi:type="uml:Operation" xmi:id="_p9kA8E2lEemGCdFy2wiJyg" name="Player2Wins"/>
        <ownedOperation xmi:type="uml:Operation" xmi:id="_sQ7QEE24EemGCdFy2wiJyg" name="Player1Wins"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Usage" xmi:id="_IH2qwE2lEemGCdFy2wiJyg" client="_IHT4ME2lEemGCdFy2wiJyg" supplier="_IHyZUE2lEemGCdFy2wiJyg"/>
      <packagedElement xmi:type="uml:AnyReceiveEvent" xmi:id="_IH344E2lEemGCdFy2wiJyg" name="*"/>
      <packagedElement xmi:type="uml:Interface" xmi:id="_IH344U2lEemGCdFy2wiJyg" name="playerWinsIO"/>
      <packagedElement xmi:type="uml:Usage" xmi:id="_IH9YcE2lEemGCdFy2wiJyg" client="_IHT4ME2lEemGCdFy2wiJyg" supplier="_IH344U2lEemGCdFy2wiJyg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_p-OvUE2lEemGCdFy2wiJyg" operation="_p9kA8E2lEemGCdFy2wiJyg"/>
      <packagedElement xmi:type="uml:CallEvent" xmi:id="_sQ8eME24EemGCdFy2wiJyg" operation="_sQ7QEE24EemGCdFy2wiJyg"/>
    </packagedElement>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_sXO60zuNEemh7Jv-t4KSvQ">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_sXO61DuNEemh7Jv-t4KSvQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/uml-rt.profile.uml#_1h74oEeVEeO0lv5O1DTHOQ"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_sXO61TuNEemh7Jv-t4KSvQ">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_sXRXEDuNEemh7Jv-t4KSvQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/statemachine#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UML_RT_PROFILE/UMLRealTimeSM-addendum.profile.uml#_KLcn0FDtEeOA4ecmvfqvaw"/>
    </profileApplication>
    <profileApplication xmi:type="uml:ProfileApplication" xmi:id="_sXRXETuNEemh7Jv-t4KSvQ">
      <eAnnotations xmi:type="ecore:EAnnotation" xmi:id="_sXRXEjuNEemh7Jv-t4KSvQ" source="http://www.eclipse.org/uml2/2.0.0/UML">
        <references xmi:type="ecore:EPackage" href="http://www.eclipse.org/papyrus/umlrt/cppproperties#/"/>
      </eAnnotations>
      <appliedProfile xmi:type="uml:Profile" href="pathmap://UMLRT_CPP/RTCppProperties.profile.uml#_vl5LALs8EeSTjNEQkASznQ"/>
    </profileApplication>
  </uml:Model>
  <UMLRealTime:Capsule xmi:id="_v81vkDuNEemh7Jv-t4KSvQ" base_Class="_v3EewDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:Capsule xmi:id="_xmz-EDuNEemh7Jv-t4KSvQ" base_Class="_xmnJwDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:CapsulePart xmi:id="_0UDncDuNEemh7Jv-t4KSvQ" base_Property="_0T2zIDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_3aAEsDuNEemh7Jv-t4KSvQ" base_Package="_3Z7MMDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_3aGLUDuNEemh7Jv-t4KSvQ" base_Interface="_3aEWIDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_3aU00DuNEemh7Jv-t4KSvQ" base_Interface="_3aP8UDuNEemh7Jv-t4KSvQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_3afz8DuNEemh7Jv-t4KSvQ" base_Interface="_3aZtUTuNEemh7Jv-t4KSvQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_3alTgDuNEemh7Jv-t4KSvQ" base_Collaboration="_3ZxbMDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTPort xmi:id="_6kGCIDuNEemh7Jv-t4KSvQ" isPublish="false" isWired="true" base_Port="_6kAikDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTPort xmi:id="_8mmFYDuNEemh7Jv-t4KSvQ" isPublish="false" isWired="true" base_Port="_8mf-wDuNEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTConnector xmi:id="_A2E9kDuOEemh7Jv-t4KSvQ" base_Connector="_A17zoDuOEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTPort xmi:id="_BhB_EDuOEemh7Jv-t4KSvQ" isPublish="false" isWired="false" base_Port="_Bg9GkDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_DO7rUDuOEemh7Jv-t4KSvQ" base_Pseudostate="_DO2LwDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTState xmi:id="_DPDnIDuOEemh7Jv-t4KSvQ" base_State="_DO_8wDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTRegion xmi:id="_DPGqcDuOEemh7Jv-t4KSvQ" base_Region="_DOx6UDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_DPRCgDuOEemh7Jv-t4KSvQ" base_StateMachine="_DOfmcDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_F5dX4DuOEemh7Jv-t4KSvQ" base_Pseudostate="_F5ZtgDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTState xmi:id="_F5jegDuOEemh7Jv-t4KSvQ" base_State="_F5gbMDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTRegion xmi:id="_F5l6wDuOEemh7Jv-t4KSvQ" base_Region="_F5WqMDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_F5sBYDuOEemh7Jv-t4KSvQ" base_StateMachine="_F5Kc8DuOEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTPort xmi:id="_P5He8DuOEemh7Jv-t4KSvQ" isPublish="false" isWired="false" base_Port="_P5CmcDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTState xmi:id="_geLMsDuOEemh7Jv-t4KSvQ" base_State="_geIwcDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTState xmi:id="_tncwEDuOEemh7Jv-t4KSvQ" base_State="_tnaT0DuOEemh7Jv-t4KSvQ"/>
  <UMLRealTime:RTPort xmi:id="_xpawsDuOEemh7Jv-t4KSvQ" isPublish="false" isWired="false" base_Port="_xpUqEDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTState xmi:id="_-0oNwDuOEemh7Jv-t4KSvQ" base_State="_-0j8UDuOEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTState xmi:id="_Ly5RoDuoEemh7Jv-t4KSvQ" base_State="_Ly0ZIDuoEemh7Jv-t4KSvQ"/>
  <UMLRealTime:Capsule xmi:id="_-xWdED-8EemACYDE-qKd5g" base_Class="_-w7mUD-8EemACYDE-qKd5g"/>
  <UMLRealTime:CapsulePart xmi:id="___S24D-8EemACYDE-qKd5g" base_Property="__-_78D-8EemACYDE-qKd5g"/>
  <UMLRealTime:ProtocolContainer xmi:id="_GkMHQD-9EemACYDE-qKd5g" base_Package="_GkIc4D-9EemACYDE-qKd5g"/>
  <UMLRealTime:RTMessageSet xmi:id="_GkQYsD-9EemACYDE-qKd5g" base_Interface="_GkN8cD-9EemACYDE-qKd5g"/>
  <UMLRealTime:RTMessageSet xmi:id="_GkXtcT-9EemACYDE-qKd5g" base_Interface="_GkXtcD-9EemACYDE-qKd5g" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_Gkg3YT-9EemACYDE-qKd5g" base_Interface="_Gkg3YD-9EemACYDE-qKd5g" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_GkozMD-9EemACYDE-qKd5g" base_Collaboration="_GkELcD-9EemACYDE-qKd5g"/>
  <UMLRealTime:RTPort xmi:id="_LTS6sD-9EemACYDE-qKd5g" isPublish="false" isWired="true" base_Port="_LTNbID-9EemACYDE-qKd5g"/>
  <UMLRealTime:RTPort xmi:id="_N_pMMD-9EemACYDE-qKd5g" isPublish="false" isWired="true" base_Port="_N_kTsD-9EemACYDE-qKd5g"/>
  <UMLRealTime:RTConnector xmi:id="_k8pTcD-9EemACYDE-qKd5g" base_Connector="_k8Y0wD-9EemACYDE-qKd5g"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_uO16wD_BEemACYDE-qKd5g" base_Pseudostate="_uOvNED_BEemACYDE-qKd5g"/>
  <UMLRTStateMachines:RTState xmi:id="_uO8BYD_BEemACYDE-qKd5g" base_State="_uO5lID_BEemACYDE-qKd5g"/>
  <UMLRTStateMachines:RTRegion xmi:id="_uO92kD_BEemACYDE-qKd5g" base_Region="_uOqUkD_BEemACYDE-qKd5g"/>
  <UMLRTStateMachines:RTStateMachine xmi:id="_uPJcwD_BEemACYDE-qKd5g" base_StateMachine="_uOYAsD_BEemACYDE-qKd5g"/>
  <UMLRealTime:RTPort xmi:id="_yXaSoD_BEemACYDE-qKd5g" isPublish="false" isWired="false" base_Port="_yXWBMD_BEemACYDE-qKd5g"/>
  <UMLRTStateMachines:RTState xmi:id="_RYchwD_CEemACYDE-qKd5g" base_State="_RYXCMD_CEemACYDE-qKd5g"/>
  <RTCppProperties:CapsuleProperties xmi:id="_yENtAD_FEemACYDE-qKd5g" headerPreface="" implementationPreface="#include&lt;iostream>&#xD;&#xA;#include&lt;cstdlib>&#xD;&#xA;#include &lt;string>&#xD;&#xA;#include &lt;iterator> &#xD;&#xA;#include &lt;map> &#xD;&#xA;#include &lt;ctype.h>&#xD;&#xA;#include &lt;list>" base_Class="_-w7mUD-8EemACYDE-qKd5g" privateDeclarations="int ChessBoard[8][8] = {&#xD;&#xA;    {-2, -3, -4, -5, -6, -4, -3, -2},&#xD;&#xA;    {-1, -1, -1, -1, -1, -1, -1, -1},&#xD;&#xA;    {0, 0, 0, 0, 0, 0, 0,0},&#xD;&#xA;    {0, 0, 0, 0, 0, 0, 0,0},&#xD;&#xA;    {0, 0, 0, 0, 0, 0, 0,0},&#xD;&#xA;    {0, 0, 0, 0, 0, 0, 0,0},&#xD;&#xA;    {1, 1,1,1,1,1,1,1},&#xD;&#xA;    {2, 3, 4, 5, 6, 4, 3, 2}, };"/>
  <RTCppProperties:CapsuleProperties xmi:id="_MAUpsD_GEemACYDE-qKd5g" implementationPreface="#include&lt;iostream>&#xD;&#xA;#include&lt;cstdlib>&#xD;&#xA;#include &lt;string>" base_Class="_xmnJwDuNEemh7Jv-t4KSvQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_o0cYEEBEEemqJPrZwKkwWQ" base_Pseudostate="_o0TOIEBEEemqJPrZwKkwWQ"/>
  <UMLRealTime:ProtocolContainer xmi:id="_YQLfEUBFEemqJPrZwKkwWQ" base_Package="_YQLfEEBFEemqJPrZwKkwWQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_YQUpAEBFEemqJPrZwKkwWQ" base_Interface="_YQLfEkBFEemqJPrZwKkwWQ"/>
  <UMLRealTime:RTMessageSet xmi:id="_YQUpA0BFEemqJPrZwKkwWQ" base_Interface="_YQUpAkBFEemqJPrZwKkwWQ" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_YQeaA0BFEemqJPrZwKkwWQ" base_Interface="_YQeaAkBFEemqJPrZwKkwWQ" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_YQeaBkBFEemqJPrZwKkwWQ" base_Collaboration="_YQBuEEBFEemqJPrZwKkwWQ"/>
  <UMLRealTime:RTPort xmi:id="_bNPGEEBFEemqJPrZwKkwWQ" isPublish="false" isWired="true" base_Port="_bNFVEEBFEemqJPrZwKkwWQ"/>
  <UMLRealTime:RTPort xmi:id="_dMdL0UBFEemqJPrZwKkwWQ" isPublish="false" isWired="true" base_Port="_dMdL0EBFEemqJPrZwKkwWQ"/>
  <UMLRealTime:RTConnector xmi:id="_mIq440BFEemqJPrZwKkwWQ" base_Connector="_mIq44EBFEemqJPrZwKkwWQ"/>
  <UMLRTStateMachines:RTState xmi:id="_nlzv0UBGEemqJPrZwKkwWQ" base_State="_nlzv0EBGEemqJPrZwKkwWQ"/>
  <UMLRealTime:RTPort xmi:id="_PNzxEEtFEemM1b60lyH_SQ" isPublish="false" isWired="false" base_Port="_PNPJUEtFEemM1b60lyH_SQ"/>
  <UMLRealTime:Capsule xmi:id="_7SomoEtFEemM1b60lyH_SQ" base_Class="_7Rn6AEtFEemM1b60lyH_SQ"/>
  <UMLRTStateMachines:RTState xmi:id="_GvcN4EtWEemM1b60lyH_SQ" base_State="_GvXVYEtWEemM1b60lyH_SQ"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_pjxqUEtoEemM1b60lyH_SQ" base_Pseudostate="_pjunAEtoEemM1b60lyH_SQ"/>
  <UMLRTStateMachines:RTState xmi:id="_769skE2jEemGCdFy2wiJyg" base_State="_766pQE2jEemGCdFy2wiJyg"/>
  <UMLRealTime:ProtocolContainer xmi:id="_IHrEkE2lEemGCdFy2wiJyg" base_Package="_IHpPYE2lEemGCdFy2wiJyg"/>
  <UMLRealTime:RTMessageSet xmi:id="_IHvWAE2lEemGCdFy2wiJyg" base_Interface="_IHs5wE2lEemGCdFy2wiJyg"/>
  <UMLRealTime:RTMessageSet xmi:id="_IH1coE2lEemGCdFy2wiJyg" base_Interface="_IHyZUE2lEemGCdFy2wiJyg" rtMsgKind="out"/>
  <UMLRealTime:RTMessageSet xmi:id="_IH6VIE2lEemGCdFy2wiJyg" base_Interface="_IH344U2lEemGCdFy2wiJyg" rtMsgKind="inOut"/>
  <UMLRealTime:Protocol xmi:id="_IH_NoE2lEemGCdFy2wiJyg" base_Collaboration="_IHT4ME2lEemGCdFy2wiJyg"/>
  <UMLRealTime:RTPort xmi:id="_KxXDoE2lEemGCdFy2wiJyg" isPublish="false" isWired="true" base_Port="_KxGk8E2lEemGCdFy2wiJyg"/>
  <UMLRealTime:RTPort xmi:id="_NxTmkE2lEemGCdFy2wiJyg" isPublish="false" isWired="true" base_Port="_NxOuEE2lEemGCdFy2wiJyg"/>
  <UMLRealTime:RTConnector xmi:id="_bOOesE2lEemGCdFy2wiJyg" base_Connector="_bOIYEE2lEemGCdFy2wiJyg"/>
  <UMLRTStateMachines:RTPseudostate xmi:id="_n1RM0E2nEemGCdFy2wiJyg" base_Pseudostate="_n1OJgE2nEemGCdFy2wiJyg"/>
</xmi:XMI>
